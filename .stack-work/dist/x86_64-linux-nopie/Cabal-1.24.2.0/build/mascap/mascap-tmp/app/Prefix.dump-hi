
==================== FINAL INTERFACE ====================
2017-08-18 20:24:41.859219971 UTC

interface main@main:Prefix 8002
  interface hash: 952575b37f1b1a5a7717668a387a343c
  ABI hash: 9669be8c4d0be4735ca533903f1722e0
  export-list hash: 5ce9e9533c70b2312070611404cf471b
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 65748ac5a3dff63306110c433e0d7a9d
  sig of: Nothing
  used TH splices: False
  where
exports:
  Prefix.find
  Prefix.fromList
  Prefix.install
  Prefix.toInterp
  Prefix.Prefix{Prefix.Prefix}
module dependencies: Mascarpone
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1 mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      transformers-0.5.2.0@transformers-0.5.2.0
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
import  -/  base-4.9.1.0:Control.Arrow 70754b538e7d75521cd68162917b6946
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.Functor 5ab1dc703df5b482e77efb697833ca3c
import  -/  base-4.9.1.0:Data.List 07ae2acca6538aa0800bd0a993ac6ac1
import  -/  base-4.9.1.0:Data.OldList 27987919d8da2f92e3f472ca81f730f8
import  -/  base-4.9.1.0:Data.Tuple 7dc4bbb45d2e69c991ffac438beeca11
import  -/  base-4.9.1.0:Debug.Trace a9edf3aec504f4423d8ba829ab373a25
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map 20d4ffbee41965d03d6a989425473dc4
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base d432f6875983131473086af8cb290590
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  Mascarpone 451cd48164f9e5a8705f4e988dbde3e7
  exports: 3f0f8a810f536ddcbf15f5b82e0c9b44
  Effect 399d47d0253de537ec0385742e458ee9
  Interpreter 2ad2b61dd1f0649edd19f63850eae9c1
  Interpreter 399d47d0253de537ec0385742e458ee9
  Intr ffa51704995581e5b9fb42baa13b9291
  Symb 43a2d0d8d29abc56eadff8fc0dd37655
  Symbol f686db1eb2314668a5f530b3cca68098
  codepage 87e2a70a400dedd1fdd341f2672a0413
  deify acab718a92d96c1340afa7664247f17b
  extract a1a0adfa2ff98512c6f80247033fcd83
  fallback a7ce28b360f64071fb7a6a1ac7b67b05
  interpreter 34e44a641a1faf9f93848280dc8859d0
  nop 68fd7b798885c156d5a9e827050b120a
  parent 29aca751cf09c7f3b3edf1068fe4ca17
  perform b2ab6f5cd1c0c8a9871b9265fe71deda
  push b08ba255272e87a51829970e221cf8fe
import  -/  mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6:Control.Monad.State 749dca8ca0e6625b32091d445bd92b01
import  -/  mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6:Control.Monad.State.Class 6d31234b0a911b56412061943d18b89e
a2e76c712a53250e5603a0837e2d06ef
  $fShowPrefix ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    GHC.Show.Show (Prefix.Prefix a b)
  DFunId
  {- Arity: 2,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(C1(U))),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dShow :: GHC.Show.Show b)
                      ($dShow1 :: GHC.Show.Show a).
                  @ (Prefix.Prefix a b)
                  (Prefix.$fShowPrefix_$cshowsPrec @ a @ b $dShow $dShow1)
                  (Prefix.$fShowPrefix_$cshow @ a @ b $dShow $dShow1)
                  (Prefix.$fShowPrefix_$cshowList @ a @ b $dShow $dShow1) -}
5693545c3cbfb4d85bac9fc6d0852ec2
  $fShowPrefix1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
a2e76c712a53250e5603a0837e2d06ef
  $fShowPrefix_$cshow ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    Prefix.Prefix a b -> GHC.Base.String
  {- Arity: 3,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(C1(U))),A,A)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   ($dShow :: GHC.Show.Show b)
                   ($dShow1 :: GHC.Show.Show a)
                   (x :: Prefix.Prefix a b) ->
                 Prefix.$fShowPrefix_$cshowsPrec
                   @ a
                   @ b
                   $dShow
                   $dShow1
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
a2e76c712a53250e5603a0837e2d06ef
  $fShowPrefix_$cshowList ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    [Prefix.Prefix a b] -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(C1(U))),A,A)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   ($dShow :: GHC.Show.Show b)
                   ($dShow1 :: GHC.Show.Show a) ->
                 GHC.Show.showList__
                   @ (Prefix.Prefix a b)
                   (Prefix.$fShowPrefix_$cshowsPrec
                      @ a
                      @ b
                      $dShow
                      $dShow1
                      Prefix.$fShowPrefix1)) -}
a2e76c712a53250e5603a0837e2d06ef
  $fShowPrefix_$cshowsPrec ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    GHC.Types.Int -> Prefix.Prefix a b -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(C1(U))),A,A)> -}
54a4657df086095c0631b0063b025e3d
  $tc'Prefix :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18094783885775003686##
                   3437061291314128522##
                   Prefix.$trModule
                   Prefix.$tc'Prefix1) -}
55fb94aff5988459225849cae3eb7627
  $tc'Prefix1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Prefix"#) -}
23dce2d9420061cfdccc003a35b85166
  $tcPrefix :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1077749496620107399##
                   17867056027134284601##
                   Prefix.$trModule
                   Prefix.$trModule1) -}
2045fe55749d41d0e378c212aee0301a
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Prefix.$trModule2
                   Prefix.$trModule1) -}
6e0653b77f205b9c3629e2e266085477
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Prefix"#) -}
ff86d51f4881007e1a2fdbac676e852e
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
26300a7158a97121a584cb6a7337e86f
  $wfind ::
    GHC.Classes.Ord a =>
    Data.Map.Base.Map a (Prefix.Prefix a b)
    -> GHC.Base.Maybe b -> b -> [a] -> (# b, [a] #)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U(A,C(C1(U)),A,A,A,A,A,A)><L,1*U><L,1*U><L,1*U><S,1*U>,
     Inline: [0] -}
6c4ec0c6f49f326b0dd032e1b3889e0d
  $wfromList ::
    GHC.Classes.Ord a =>
    [([a], b)]
    -> (# Data.Map.Base.Map a (Prefix.Prefix a b), GHC.Base.Maybe b #)
  {- Arity: 2, Strictness: <L,U(U,C(C1(U)),A,A,A,C(C1(U)),A,A)><L,U>,
     Inline: [0] -}
a7c7d3b892edc96bd7f8a34ffa33e5a2
  $winstall ::
    Data.Map.Base.Map
      Mascarpone.Symbol
      (Prefix.Prefix Mascarpone.Symbol Mascarpone.Effect)
    -> GHC.Base.Maybe Mascarpone.Effect -> Mascarpone.Effect
  {- Arity: 2, Strictness: <S,U><L,U>, Inline: [0] -}
2641b07bfea45d1d876860762dc3101a
  $wtoInterp ::
    Mascarpone.Interpreter
    -> Data.Map.Base.Map
         Mascarpone.Symbol
         (Prefix.Prefix Mascarpone.Symbol Mascarpone.Effect)
    -> GHC.Base.Maybe Mascarpone.Effect
    -> (# Data.Map.Base.Map Mascarpone.Symbol Mascarpone.Effect,
          Mascarpone.Interpreter, Mascarpone.Symbol -> Mascarpone.Effect #)
  {- Arity: 3, Strictness: <L,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (w :: Mascarpone.Interpreter)
                   (ww :: Data.Map.Base.Map
                            Mascarpone.Symbol
                            (Prefix.Prefix Mascarpone.Symbol Mascarpone.Effect))
                   (ww1 :: GHC.Base.Maybe Mascarpone.Effect) ->
                 let {
                   x3 :: Mascarpone.StackElem = Mascarpone.Intr w
                 } in
                 (# Data.Map.Base.map
                      @ (Prefix.Prefix Mascarpone.Symbol Mascarpone.Effect)
                      @ Mascarpone.Effect
                      @ Mascarpone.Symbol
                      Prefix.install
                      ww,
                    w,
                    (\ (s :: Mascarpone.Symbol)
                       (eta :: Mascarpone.ProgState)
                       (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                     let {
                       $wk :: [Mascarpone.StackElem]
                              -> GHC.Prim.State# GHC.Prim.RealWorld
                              -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                    ((), Mascarpone.ProgState) #)
                         {- Arity: 2, Strictness: <S,1*U><S,U>, Inline: [0] -}
                       = \ (ww2 :: [Mascarpone.StackElem])[OneShot]
                           (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case ww2 of wild1 {
                           []
                           -> case Mascarpone.create3
                              ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                        ((), Mascarpone.ProgState) #)
                              of {}
                           : x1 xs
                           -> case x1 of wild2 {
                                DEFAULT
                                -> case Mascarpone.defCodepage83
                                   ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                             ((), Mascarpone.ProgState) #)
                                   of {}
                                Mascarpone.Intr i
                                -> case Mascarpone.$wextract
                                          i
                                          (GHC.Types.:
                                             @ Mascarpone.StackElem
                                             (Mascarpone.Symb s)
                                             (GHC.Types.: @ Mascarpone.StackElem x3 xs))
                                          w1 of ds1 { (#,#) ipv ipv1 ->
                                   case ipv1 of wild { (,) a1 s' ->
                                   case s' of wild4 { Mascarpone.State ds ds2 ->
                                   case ds2 of wild5 {
                                     []
                                     -> case Mascarpone.create3
                                        ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                  ((), Mascarpone.ProgState) #)
                                        of {}
                                     : x2 xs1
                                     -> case x2 of wild6 {
                                          DEFAULT
                                          -> case Mascarpone.defCodepage56
                                             ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                       ((), Mascarpone.ProgState) #)
                                             of {}
                                          Mascarpone.Op e
                                          -> (e `cast`
                                              (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                   <Mascarpone.ProgState>_N <GHC.Types.IO>_R <()>_N)
                                                (Mascarpone.State ds xs1))
                                               `cast`
                                             (GHC.Types.N:IO[0] <((), Mascarpone.ProgState)>_R)
                                               ipv } } } } } } }
                     } in
                     case ww1 of wild {
                       GHC.Base.Nothing
                       -> case eta of wild1 { Mascarpone.State ds ds1 ->
                          $wk (GHC.Types.: @ Mascarpone.StackElem x3 ds1) eta1 }
                       GHC.Base.Just x
                       -> case (x `cast`
                                (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                     <Mascarpone.ProgState>_N <GHC.Types.IO>_R <()>_N)
                                  eta)
                                 `cast`
                               (GHC.Types.N:IO[0] <((), Mascarpone.ProgState)>_R)
                                 eta1 of ds1 { (#,#) ipv ipv1 ->
                          case ipv1 of wild1 { (,) a1 s' ->
                          case s' of wild2 { Mascarpone.State ds ds2 ->
                          $wk (GHC.Types.: @ Mascarpone.StackElem x3 ds2) ipv } } } })
                      `cast`
                    (<Mascarpone.Symbol>_R
                     ->_R Trans
                              (<Mascarpone.ProgState>_R
                               ->_R Sym (GHC.Types.N:IO[0] <((), Mascarpone.ProgState)>_R))
                              (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                        <Mascarpone.ProgState>_N <GHC.Types.IO>_R <()>_N))) #)) -}
a2e76c712a53250e5603a0837e2d06ef
  type role Prefix nominal representational
  data Prefix a b
    = Prefix (Data.Map.Base.Map a (Prefix.Prefix a b))
             (GHC.Base.Maybe b)
    RecFlag: Recursive
08b55a57f59e9ddea8e9f274c3083165
  find ::
    GHC.Classes.Ord a => Prefix.Prefix a b -> b -> [a] -> (b, [a])
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(A,C(C1(U)),A,A,A,A,A,A)><S,1*U(1*U,1*U)><L,1*U><S,1*U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   (w :: GHC.Classes.Ord a)
                   (w1 :: Prefix.Prefix a b)
                   (w2 :: b)
                   (w3 :: [a]) ->
                 case w1 of ww { Prefix.Prefix ww1 ww2 ->
                 case Prefix.$wfind
                        @ a
                        @ b
                        w
                        ww1
                        ww2
                        w2
                        w3 of ww3 { (#,#) ww4 ww5 ->
                 (ww4, ww5) } }) -}
e950b7a12a1fcd4d442f4b09c17d1442
  fromList ::
    (GHC.Classes.Eq a, GHC.Classes.Ord a) =>
    [([a], b)] -> Prefix.Prefix a b
  {- Arity: 3,
     Strictness: <L,A><L,U(U,C(C1(U)),A,A,A,C(C1(U)),A,A)><L,U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   (w :: GHC.Classes.Eq a)
                   (w1 :: GHC.Classes.Ord a)
                   (w2 :: [([a], b)]) ->
                 case Prefix.$wfromList @ a @ b w1 w2 of ww { (#,#) ww1 ww2 ->
                 Prefix.Prefix @ a @ b ww1 ww2 }) -}
e3bfedf90bec5eb04610f72c84c16c22
  install ::
    Prefix.Prefix Mascarpone.Symbol Mascarpone.Effect
    -> Mascarpone.Effect
  {- Arity: 1, Strictness: <S(SL),1*U(U,U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Prefix.Prefix Mascarpone.Symbol Mascarpone.Effect) ->
                 case w of ww { Prefix.Prefix ww1 ww2 ->
                 Prefix.$winstall ww1 ww2 }) -}
9655695fe5d41a0e75dc95c27de30794
  toInterp ::
    Mascarpone.Interpreter
    -> Prefix.Prefix Mascarpone.Symbol Mascarpone.Effect
    -> Mascarpone.Interpreter
  {- Arity: 2, Strictness: <L,U><S,1*U(1*U,U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Mascarpone.Interpreter)
                   (w1 :: Prefix.Prefix Mascarpone.Symbol Mascarpone.Effect) ->
                 case w1 of ww { Prefix.Prefix ww1 ww2 ->
                 case Prefix.$wtoInterp w ww1 ww2 of ww3 { (#,,#) ww4 ww5 ww6 ->
                 Mascarpone.Interpreter ww4 ww5 ww6 } }) -}
instance GHC.Show.Show [Prefix.Prefix] = Prefix.$fShowPrefix
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

